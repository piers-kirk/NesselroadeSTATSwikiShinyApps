, aes(fill=Transport_Status, y=Frequency, x=Time)) + geom_bar(position="dodge", stat="identity") +
facet_wrap(~mask_status)
ggplot(data, aes(fill=Transport_Status, y=Frequency, x=Time)) + geom_bar(position="dodge", stat="identity") +
facet_wrap(~mask_status)
library(ggplot2)
time <- c(rep("12:00-01:00", 4) , rep("01:00-02:00", 4) , rep("02:00-03:00", 4), rep("03:00-04:00", 4), rep("04:00-05:00", 4), rep("05:00-06:00", 4))
Transport_Status <- rep(c("Non-cyclist" , "Cyclist") , 10)
mask_status <- rep(c("MASK", "NO-MASK", "NO-MASK", "MASK"), 5)
Frequency <- c(3, 17, 9, 6, 7, 7, 5, 4, 6, 5, 2, 2, 0, 14, 4, 6, 2, 5, 5, 4, 4, 4, 4, 4, 4)
Time <- as.factor(time)
Time <- factor(time, levels = c("12:00-01:00", "01:00-02:00", "02:00-03:00", "03:00-04:00", "04:00-05:00", "05:00-06:00"))
data <- data.frame(time, mask_status, Transport_Status, Frequency)
ggplot(data, aes(fill=Transport_Status, y=Frequency, x=Time)) + geom_bar(position="dodge", stat="identity") +
facet_wrap(~mask_status)
length(Frequency)
library(ggplot2)
time <- c(rep("12:00-01:00", 4) , rep("01:00-02:00", 4) , rep("02:00-03:00", 4), rep("03:00-04:00", 4), rep("04:00-05:00", 4), rep("05:00-06:00", 4))
Transport_Status <- rep(c("Non-cyclist" , "Cyclist") , 10)
mask_status <- rep(c("MASK", "NO-MASK", "NO-MASK", "MASK"), 5)
Frequency <- c(3, 17, 9, 6, 7, 7, 5, 4, 6, 5, 2, 2, 0, 14, 4, 6, 2, 5, 5, 4, 4, 4, 4, 4)
Time <- as.factor(time)
Time <- factor(time, levels = c("12:00-01:00", "01:00-02:00", "02:00-03:00", "03:00-04:00", "04:00-05:00", "05:00-06:00"))
data <- data.frame(time, mask_status, Transport_Status, Frequency)
ggplot(data, aes(fill=Transport_Status, y=Frequency, x=Time)) + geom_bar(position="dodge", stat="identity") +
facet_wrap(~mask_status)
data <- data.frame(time, mask_status, Transport_Status, Frequency)
Transport_Status <- rep(c("Non-cyclist" , "Cyclist") , 12)
library(ggplot2)
time <- c(rep("12:00-01:00", 4) , rep("01:00-02:00", 4) , rep("02:00-03:00", 4), rep("03:00-04:00", 4), rep("04:00-05:00", 4), rep("05:00-06:00", 4))
Transport_Status <- rep(c("Non-cyclist" , "Cyclist") , 12)
mask_status <- rep(c("MASK", "NO-MASK", "NO-MASK", "MASK"), 5)
Frequency <- c(3, 17, 9, 6, 7, 7, 5, 4, 6, 5, 2, 2, 0, 14, 4, 6, 2, 5, 5, 4, 4, 4, 4, 4)
Time <- as.factor(time)
Time <- factor(time, levels = c("12:00-01:00", "01:00-02:00", "02:00-03:00", "03:00-04:00", "04:00-05:00", "05:00-06:00"))
data <- data.frame(time, mask_status, Transport_Status, Frequency)
Transport_Status <- rep(c("Non-cyclist" , "Cyclist") , 12)
mask_status <- rep(c("MASK", "NO-MASK", "NO-MASK", "MASK"), 5)
Frequency <- c(3, 17, 9, 6, 7, 7, 5, 4, 6, 5, 2, 2, 0, 14, 4, 6, 2, 5, 5, 4, 4, 4, 4, 4)
Time <- as.factor(time)
Time <- factor(time, levels = c("12:00-01:00", "01:00-02:00", "02:00-03:00", "03:00-04:00", "04:00-05:00", "05:00-06:00"))
data <- data.frame(time, mask_status, Transport_Status, Frequency)
time
Transport_Status
library(ggplot2)
time <- c(rep("12:00-01:00", 4) , rep("01:00-02:00", 4) , rep("02:00-03:00", 4), rep("03:00-04:00", 4), rep("04:00-05:00", 4), rep("05:00-06:00", 4))
Transport_Status <- rep(c("Non-cyclist" , "Cyclist") , 12)
mask_status <- rep(c("MASK", "NO-MASK", "NO-MASK", "MASK"), 6)
Frequency <- c(3, 17, 9, 6, 7, 7, 5, 4, 6, 5, 2, 2, 0, 14, 4, 6, 2, 5, 5, 4, 4, 4, 4, 4)
Time <- as.factor(time)
Time <- factor(time, levels = c("12:00-01:00", "01:00-02:00", "02:00-03:00", "03:00-04:00", "04:00-05:00", "05:00-06:00"))
data <- data.frame(time, mask_status, Transport_Status, Frequency)
data
ggplot(data, aes(fill=Transport_Status, y=Frequency, x=Time)) + geom_bar(position="dodge", stat="identity") +
facet_wrap(~mask_status)
library(ggplot2)
time <- c(rep("12:00-01:00", 4) , rep("01:00-02:00", 4) , rep("02:00-03:00", 4), rep("03:00-04:00", 4), rep("04:00-05:00", 4), rep("05:00-06:00", 4))
Transport_Status <- rep(c("Non-cyclist" , "Cyclist") , 12)
mask_status <- rep(c("MASK", "NO-MASK", "NO-MASK", "MASK"), 6)
Frequency <- c(3, 17, 9, 6, 7, 7, 5, 4, 6, 5, 2, 2, 0, 14, 4, 6, 2, 5, 5, 4, 4, 4, 4, 4)
Time <- as.factor(time)
Time <- factor(time, levels = c("12:00-01:00", "01:00-02:00", "02:00-03:00", "03:00-04:00", "04:00-05:00", "05:00-06:00"))
data <- data.frame(time, mask_status, Transport_Status, Frequency)
data
ggplot(data, aes(fill=Transport_Status, y=Frequency, x=Time)) + geom_bar(position="dodge", stat="identity") +
facet_wrap(~mask_status)
library(ggplot2)
time <- c(rep("12:00-01:00", 4) , rep("01:00-02:00", 4) , rep("02:00-03:00", 4), rep("03:00-04:00", 4), rep("04:00-05:00", 4), rep("05:00-06:00", 4))
Transport_Status <- rep(c("Non-cyclist" , "Cyclist") , 12)
mask_status <- rep(c("MASK", "NO-MASK", "NO-MASK", "MASK"), 6)
Frequency <- c(38, 40, 91, 10, 27, 26, 10, 5, 7, 8, 3, 0, 7, 18, 14, 7, 26, 18, 35, 4, 23, 24, 41, 5)
Time <- as.factor(time)
Time <- factor(time, levels = c("12:00-01:00", "01:00-02:00", "02:00-03:00", "03:00-04:00", "04:00-05:00", "05:00-06:00"))
data <- data.frame(time, mask_status, Transport_Status, Frequency)
data
ggplot(data, aes(fill=Transport_Status, y=Frequency, x=Time)) + geom_bar(position="dodge", stat="identity") +
facet_wrap(~mask_status)
total <- function(x) {
z = 0
for(i in 1:length(x)) {
z = z + x[i]
}
return(z)
}
total(Frequency)
cyclists <- c(50, 31, 8, 25, 22, 29)
non_cyclists <- c(129, 37, 10, 21, 61, 64)
total(cyclists)
total(non_cyclists)
t_cyc <- total(cyclists)
t_non_cyc <- total(non_cyclists)
cyclists_no_mask <- c(40, 26, 8, 18, 18, 24)
non_cyclists_no_mask <- c(91, 10, 3, 14, 35, 41)
(cyclists_no_mask / t_cyc) * 100
t_cyclists_no_mask <- total(c(40, 26, 8, 18, 18, 24))
t_non_cyclists_no_mask <- total(c(91, 10, 3, 14, 35, 41))
(t_cyclists_no_mask / t_cyc) * 100
(t_non_cyclists_no_mask / t_cyc) * 100
source('~/ggplot2.R', echo=TRUE)
(322 / 487) * 100
(165 / 487) * 100
(t_cyclists_no_mask / t_cyc) * 100
(t_non_cyclists_no_mask / t_cyc) * 100
cyclists <- (t_cyclists_no_mask / t_cyc) * 100
walkers <- (t_non_cyclists_no_mask / t_cyc) * 100
cat("Cyclists were ", cyclists, "to wear a mask.")
cat("Non-Cyclists were ", walkers, "to not wear a mask.")
t_cyc <- total(cyclists)
walkers <- (t_non_cyclists_no_mask / t_cyc) * 100
cat("Non-Cyclists were ", walkers, "to not wear a mask.")
t_non_cyclists_no_mask
walkers <- (t_non_cyclists_no_mask / t_non_cyc) * 100
cat("Non-Cyclists were ", walkers, "to not wear a mask.")
487 - 113
68.57 - 47.30
81.21 - 60.23
print(len(11011010111010111000110100000001100000110101000100110100010000001010110))
print(length(11011010111010111000110100000001100000110101000100110100010000001010110))
print(length("11011010111010111000110100000001100000110101000100110100010000001010110"))
x = "11011010111010111000110100000001100000110101000100110100010000001010110"
print(length(x))
print(nchar(x))
print(nchar("2019181716151413121110"))
print(nchar("20191817161514131211"))
print(nchar("20191817161514131211"))
x = "10001100000110111101111101011101001000001101011111001111100001011"
print(nchar(x))
print(nchar("20191817161514131211"))
mutiply <- function(x, y) {
result <- 0
for (i in 1 : y)
result <- result + x
}
mutiply(3, 4)
mutiply(3, 4)
mutiply(3, 4)
mutiply <- function(x, y) {
result <- 0
for (i in 1 : y)
result <- result + x
print(result)
}
mutiply(3, 4)
cat("Result =", result)
mutiply <- function(x, y) {
result <- 0
for (i in 1 : y)
cat("Y = ", y)
cat("X = ", y)
result <- result + x
cat("Result =", result)
print(result)
}
mutiply(3, 4)
mutiply <- function(x, y) {
result <- 0
for (i in 1 : y)
cat("Y = ", y, "\n")
cat("X = ", y, "\n")
result <- result + x
cat("Result =", result, "\n")
print(result)
}
mutiply(3, 4)
mutiply <- function(x, y) {
result <- 0
for (i in 1 : y)
cat("Y = ", i, "\n")
cat("X = ", x, "\n")
result <- result + x
cat("Result =", result, "\n")
print(result)
}
mutiply(3, 4)
mutiply(3, 20191817161514131211)
mutiply(3, 201918)
mutiply_2 <- function(x, y) {
result <- 0
for (i in 0:(n-1))
for(j in 0:(m-1))
result <- result + 10^(i+j)
print(result)
}
mutiply_2(3, 4)
mutiply_2 <- function(x, y) {
n = x
m = y
result <- 0
for (i in 0:(n-1))
for(j in 0:(m-1))
result <- result + 10^(i+j)
print(result)
}
mutiply_2(3, 4)
mutiply_2 <- function(x, y) {
n = x
m = y
result <- 0
for (i in 0:(n-1))
for(j in 0:(m-1))
result <- result + 10^(i+j) * x*i * x^j
print(result)
}
mutiply_2(3, 4)
success.if.all.gt.six <- function(arg.vec) {
if(arg.vec > 6) {
return (TRUE)
} else {
return (FALSE)
}
}
test <- success.if.all.gt.six(c(1, 2, 3, 4, 5, 6))
success.if.all.gt.six <- function(arg.vec) {
if(arg.vec > 6) {
return (TRUE)
} else {
return (FALSE)
}
}
test <- success.if.all.gt.six(c(1, 2, 3, 4, 5, 6))
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success.if.all.gt.six <- function(arg.vec) {
for (i in 1:len(arg.vec)) {
if (arg.vec < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success.if.all.gt.six <- function(arg.vec) {
for (i in 1:length(arg.vec)) {
if (arg.vec < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success.if.all.gt.six <- function(arg_) {
for (i in 1:length(arg_)) {
if (arg_ < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success_if_all_gt_six <- function(arg_) {
for (i in 1:length(arg_)) {
if (arg_ < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success_if_all_gt_six <- function(arg_) {
for (i in 1:length(arg_)) {
if (i < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success_if_all_gt_six <- function(arg_) {
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true
test <- success.if.all.gt.six(test_vec_true)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- <- c(6, 6, 6)
test <- success.if.all.gt.six(test_vec_true)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- <- c(6, 6, 6)
test <- success.if.all.gt.six(test_vec_true)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(6, 6, 8)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
max_ <- max(arg_)
if (max_ < 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(6, 6, 8)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
max_ <- max(arg_)
if (max_ < 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(6, 6, 8)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
max_ <- max(arg_)
if (max_ < 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(10, 11, 3)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
max_ <- max(arg_)
if (max_ > 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(10, 11, 3)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
min_ <- min(arg_)
if (min_ > 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(10, 11, 3)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
min_ <- min(arg_)
if (min_ > 6) return(T)
else { return(F) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(10, 11, 3)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
min_ <- min(arg_)
if (min_ > 6) return(T)
else { return(F) }
}
test_vec_true <- c(10, 11, 6)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
min_ <- min(arg_)
if (min_ > 6) return(T)
else { return(F) }
}
test_vec_true <- c(10, 11, 7)
test <- success.if.all.gt.six(test_vec_true)
test
library(psych)
library(effsize)
library(car)
library(ggplot2)
set.seed(1551)
set.seed(1551)
set.seed(1551)
set.seed(1551)
Blue <- rnorm(90, mean = 85, sd = 3)
White <- rnorm(100, mean = 70, sd = 3)
# Add in Outliers
Blue <- c(Blue, rep(100, 10))
hist(Blue)
hist(White)
TestScore <- c(Blue, White)
RoomColor <- c(rep(1, 100), rep(2, 100))
RoomColor <- factor(x = RoomColor, labels = c("Blue", "White"))
RoomColorData <- data.frame("RoomColor" = RoomColor, "TestScore" = TestScore)
describe(RoomColorData)
aggregate(TestScore ~ RoomColor, data = RoomColorData, FUN = mean)
aggregate(TestScore ~ RoomColor, data = RoomColorData, FUN = sd)
# QQ-Plot
plot(lm(TestScore ~ RoomColor, data=RoomColorData),which=2)
# Shapiro Wilk Normality Test
shapiro.test(lm(TestScore ~ RoomColor, data=RoomColorData)$residuals)
# Residual Variance Plot
plot(lm(TestScore ~ RoomColor, data=RoomColorData),which=3)
# Standard Deviation Observation
aggregate(TestScore ~ RoomColor, data=RoomColorData, FUN = sd)
# Bartlett Test
bartlett.test(TestScore ~ RoomColor, data=RoomColorData)
# Levene's Test
leveneTest(TestScore ~ RoomColor, data=RoomColorData)
# The mean difference for our sample
m.diff <- mean(RoomColorData$TestScore[RoomColorData$RoomColor == "White"]) - mean(RoomColorData$TestScore[RoomColorData$RoomColor == "Blue"])
nreps <- 5000
null.dist <- rep(NA, nreps)
for(i in 1:nreps){
Predictor <- RoomColorData$RoomColor
Outcome <- sample(RoomColorData$TestScore, size = nrow(RoomColorData), replace = FALSE)
null.dist[i] <- mean(Outcome[Predictor == "White"]) - mean(Outcome[Predictor == "Blue"])
}
hist(null.dist)
abline(v = abs(m.diff))
abline(v = - abs(m.diff))
(p_value <- (sum(null.dist >= abs(m.diff)) + sum(null.dist <= -abs(m.diff)))/(length(null.dist)))
(sum(null.dist <= m.diff)) / (nreps)*2
(p_value <- (sum(null.dist >= 1) + sum(null.dist <= -1))/(length(null.dist)))
2*((sum(null.dist >= 1)) / (nreps))
# The mean difference for our sample
m.diff <- mean(RoomColorData$TestScore[RoomColorData$RoomColor == "White"]) - mean(RoomColorData$TestScore[RoomColorData$RoomColor == "Blue"])
nreps <- 5000
TestMean <- rep(NA, nreps)
for (i in 1:nreps){
WhiteSample <- sample(White, length(White), replace = TRUE)
BlueSample <- sample(Blue, length(Blue), replace = TRUE)
TestMean[i] <- mean(WhiteSample) - mean(BlueSample)
}
hist(TestMean)
abline(v = abs(m.diff))
abline(v = - abs(m.diff))
greater.p <- (sum(TestMean >= 0) + 1)/(nreps + 1)
lesser.p <- (sum(TestMean <= 0) + 1)/(nreps + 1)
if(greater.p < lesser.p){
p.value <- greater.p*2
}else if(lesser.p < greater.p){
p.value <- lesser.p*2
}
p.value
quantile(TestMean,c(.025,.975))
install.packages(c("backports", "broom", "callr", "car", "cli", "clipr", "codetools", "colorspace", "cowplot", "cpp11", "data.table", "Deriv", "digest", "doParallel", "DT", "foreach", "foreign", "Formula", "ggplot2", "ggraph", "ggrepel", "gh", "graphlayouts", "Hmisc", "htmlTable", "htmlwidgets", "igraph", "isoband", "iterators", "jsonlite", "KernSmooth", "knitr", "labeling", "lme4", "lubridate", "magrittr", "Matrix", "NetworkToolbox", "nlme", "NLP", "openssl", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "plotly", "processx", "ps", "psych", "quantreg", "R6", "RcppArmadillo", "RcppEigen", "readr", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "slam", "sp", "StanHeaders", "statmod", "stringdist", "survival", "tau", "testthat", "tibble", "tinytex", "tm", "usethis", "vctrs"))
setwd("~/Desktop/Spring2020/6-RA /Spring2021")
setwd("~/Desktop/Spring2020/NessRA/Spring2021/NesselroadeSTATSwikiShinyApps")
library(shiny); runApp('template.R')
ui <- fluidPage(
# *Input() functions,
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100)
# *Output() functions
)
runApp('template.R')
runApp('template.R')
runApp('template.R')
runApp('template.R')
runApp('template.R')
hist(rnorm(n = input$num), main = "Central Limit Theorem", col = "Darkcyan")
runApp('template.R')
runApp('template.R')
hist(rnorm(n = input$num), main = "Central Limit Theorem", xlab = "", ylab = "Number of Samples", col = "Darkcyan")
runApp('template.R')
hist(rnorm(n = input$num), main = "Central Limit Theorem",
xlab = "", ylab = "Number of Samples", col = "Darkcyan",
xlim = -10,10,1)
runApp('template.R')
runApp('template.R')
runApp('template.R')
