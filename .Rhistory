for (i in 1:len(arg.vec)) {
if (arg.vec < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success.if.all.gt.six <- function(arg.vec) {
for (i in 1:length(arg.vec)) {
if (arg.vec < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success.if.all.gt.six <- function(arg_) {
for (i in 1:length(arg_)) {
if (arg_ < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success_if_all_gt_six <- function(arg_) {
for (i in 1:length(arg_)) {
if (arg_ < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success_if_all_gt_six <- function(arg_) {
for (i in 1:length(arg_)) {
if (i < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success_if_all_gt_six <- function(arg_) {
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
return(F)
}
return(T)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 6)
test <- success.if.all.gt.six(test_vec)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true
test <- success.if.all.gt.six(test_vec_true)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- <- c(6, 6, 6)
test <- success.if.all.gt.six(test_vec_true)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- <- c(6, 6, 6)
test <- success.if.all.gt.six(test_vec_true)
test
success_if_all_gt_six <- function(arg_) {
my_bool = T
for (i in 1:length(arg_)) {
if (arg_[i] < 6)
my_bool = F
}
return(my_bool)
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(6, 6, 8)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
max_ <- max(arg_)
if (max_ < 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(6, 6, 8)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
max_ <- max(arg_)
if (max_ < 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(6, 6, 8)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
max_ <- max(arg_)
if (max_ < 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(10, 11, 3)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
max_ <- max(arg_)
if (max_ > 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(10, 11, 3)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
min_ <- min(arg_)
if (min_ > 6) return(F)
else { return(T) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(10, 11, 3)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
min_ <- min(arg_)
if (min_ > 6) return(T)
else { return(F) }
}
test_vec <- c(1, 2, 3, 4, 5, 5)
test_vec_true <- c(10, 11, 3)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
min_ <- min(arg_)
if (min_ > 6) return(T)
else { return(F) }
}
test_vec_true <- c(10, 11, 6)
test <- success.if.all.gt.six(test_vec_true)
test
success.if.all.gt.six <- function(arg_) {
min_ <- min(arg_)
if (min_ > 6) return(T)
else { return(F) }
}
test_vec_true <- c(10, 11, 7)
test <- success.if.all.gt.six(test_vec_true)
test
library(psych)
library(effsize)
library(car)
library(ggplot2)
set.seed(1551)
set.seed(1551)
set.seed(1551)
set.seed(1551)
Blue <- rnorm(90, mean = 85, sd = 3)
White <- rnorm(100, mean = 70, sd = 3)
# Add in Outliers
Blue <- c(Blue, rep(100, 10))
hist(Blue)
hist(White)
TestScore <- c(Blue, White)
RoomColor <- c(rep(1, 100), rep(2, 100))
RoomColor <- factor(x = RoomColor, labels = c("Blue", "White"))
RoomColorData <- data.frame("RoomColor" = RoomColor, "TestScore" = TestScore)
describe(RoomColorData)
aggregate(TestScore ~ RoomColor, data = RoomColorData, FUN = mean)
aggregate(TestScore ~ RoomColor, data = RoomColorData, FUN = sd)
# QQ-Plot
plot(lm(TestScore ~ RoomColor, data=RoomColorData),which=2)
# Shapiro Wilk Normality Test
shapiro.test(lm(TestScore ~ RoomColor, data=RoomColorData)$residuals)
# Residual Variance Plot
plot(lm(TestScore ~ RoomColor, data=RoomColorData),which=3)
# Standard Deviation Observation
aggregate(TestScore ~ RoomColor, data=RoomColorData, FUN = sd)
# Bartlett Test
bartlett.test(TestScore ~ RoomColor, data=RoomColorData)
# Levene's Test
leveneTest(TestScore ~ RoomColor, data=RoomColorData)
# The mean difference for our sample
m.diff <- mean(RoomColorData$TestScore[RoomColorData$RoomColor == "White"]) - mean(RoomColorData$TestScore[RoomColorData$RoomColor == "Blue"])
nreps <- 5000
null.dist <- rep(NA, nreps)
for(i in 1:nreps){
Predictor <- RoomColorData$RoomColor
Outcome <- sample(RoomColorData$TestScore, size = nrow(RoomColorData), replace = FALSE)
null.dist[i] <- mean(Outcome[Predictor == "White"]) - mean(Outcome[Predictor == "Blue"])
}
hist(null.dist)
abline(v = abs(m.diff))
abline(v = - abs(m.diff))
(p_value <- (sum(null.dist >= abs(m.diff)) + sum(null.dist <= -abs(m.diff)))/(length(null.dist)))
(sum(null.dist <= m.diff)) / (nreps)*2
(p_value <- (sum(null.dist >= 1) + sum(null.dist <= -1))/(length(null.dist)))
2*((sum(null.dist >= 1)) / (nreps))
# The mean difference for our sample
m.diff <- mean(RoomColorData$TestScore[RoomColorData$RoomColor == "White"]) - mean(RoomColorData$TestScore[RoomColorData$RoomColor == "Blue"])
nreps <- 5000
TestMean <- rep(NA, nreps)
for (i in 1:nreps){
WhiteSample <- sample(White, length(White), replace = TRUE)
BlueSample <- sample(Blue, length(Blue), replace = TRUE)
TestMean[i] <- mean(WhiteSample) - mean(BlueSample)
}
hist(TestMean)
abline(v = abs(m.diff))
abline(v = - abs(m.diff))
greater.p <- (sum(TestMean >= 0) + 1)/(nreps + 1)
lesser.p <- (sum(TestMean <= 0) + 1)/(nreps + 1)
if(greater.p < lesser.p){
p.value <- greater.p*2
}else if(lesser.p < greater.p){
p.value <- lesser.p*2
}
p.value
quantile(TestMean,c(.025,.975))
install.packages(c("backports", "broom", "callr", "car", "cli", "clipr", "codetools", "colorspace", "cowplot", "cpp11", "data.table", "Deriv", "digest", "doParallel", "DT", "foreach", "foreign", "Formula", "ggplot2", "ggraph", "ggrepel", "gh", "graphlayouts", "Hmisc", "htmlTable", "htmlwidgets", "igraph", "isoband", "iterators", "jsonlite", "KernSmooth", "knitr", "labeling", "lme4", "lubridate", "magrittr", "Matrix", "NetworkToolbox", "nlme", "NLP", "openssl", "openxlsx", "pbkrtest", "pillar", "pkgbuild", "plotly", "processx", "ps", "psych", "quantreg", "R6", "RcppArmadillo", "RcppEigen", "readr", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "slam", "sp", "StanHeaders", "statmod", "stringdist", "survival", "tau", "testthat", "tibble", "tinytex", "tm", "usethis", "vctrs"))
setwd("~/Desktop/Spring2020/NessRA/Spring2021/NesselroadeSTATSwikiShinyApps")
## Binomial
## Chi-Square
## F
## Logistic
## Normal Distribution
rnorm(n, mean = 0, sd = 1)
rnorm(5, mean = 0, sd = 1)
## Binomial
## Chi-Square
## F
## Logistic
## Normal Distribution (Gaussian)
set.seed(5)
norm_vector <- rnorm(5, mean = 0, sd = 1)
## Binomial
## Chi-Square
## F
## Logistic
## Normal Distribution (Gaussian)
set.seed(1000000)
norm_vector <- rnorm(5, mean = 0, sd = 1)
hist(norm_vector)
norm_vector <- rnorm(1000000, mean = 0, sd = 1)
hist(norm_vector)
for (i in 0:9) {
sample()
}
}
for (i in 0:9) {
}
sample(norm_vector)
sample_size = 10
for (i in 0:9) {
sample(norm_vector, size=sample_size)
}
sample_size = 10
for (i in 0:9) {
mean(sample(norm_vector, size=sample_size))
}
sample_size = 10
sample_means = c()
## Binomial
## Chi-Square
## F
## Logistic
## Normal Distribution (Gaussian)
set.seed(1000000)
norm_vector <- rnorm(1000000, mean = 0, sd = 1)
hist(norm_vector)
sample_size = 10
sample_means = c()
for (i in 1:10) {
sample_means[i] = mean(sample(norm_vector, size=sample_size))
}
for (i in 1:10) {
sample_means[i] = mean(sample(norm_vector, size=sample_size))
}
## Binomial
## Chi-Square
## F
## Logistic
## Normal Distribution (Gaussian)
set.seed(1000000)
norm_vector <- rnorm(1000000, mean = 0, sd = 1)
hist(norm_vector)
number_of_samples = 100;
sample_size = 10;
sample_means = c()
for (i in 1:number_of_samples) {
sample_means[i] = mean(sample(norm_vector, size=sample_size))
}
sample_means
hist(sample_means)
#### creating the distribution of sample means
number_of_samples = 10;
sample_size = 10;
sample_means = c()
for (i in 1:number_of_samples) {
sample_means[i] = mean(sample(norm_vector, size=sample_size))
}
hist(sample_means)
#### creating the distribution of sample means
number_of_samples = 30;
sample_size = 10;
sample_means = c()
for (i in 1:number_of_samples) {
sample_means[i] = mean(sample(norm_vector, size=sample_size))
}
hist(sample_means)
#### creating the distribution of sample means
number_of_samples = 10;
sample_size = 30;
sample_means = c()
for (i in 1:number_of_samples) {
sample_means[i] = mean(sample(norm_vector, size=sample_size))
}
hist(sample_means)
#### creating the distribution of sample means
number_of_samples = 20;
sample_size = 30;
sample_means = c()
for (i in 1:number_of_samples) {
sample_means[i] = mean(sample(norm_vector, size=sample_size))
}
hist(sample_means)
##############################################
################## Poisson  ##################
##############################################
# creating the population distribution
poisson_vec <- rpois(1000000)
##############################################
################## Poisson  ##################
##############################################
# creating the population distribution
poisson_vec <- rpois(1000000, lamda=18)
##############################################
################## Poisson  ##################
##############################################
# creating the population distribution
poisson_vec <- rpois(1000000, lambda=18)
sampling_distribution <- function(pop_dist) {
sample_dist <- c()
for (i in 1:number_of_samples) {
sample_dist[i] = mean(sample(pop_dist, size=sample_size))
}
return(samples_means)
}
## Binomial
## Chi-Square
## F
## Logistic
##############################################
####### Normal Distribution (Gaussian) #######
##############################################
# creating the population distribution
norm_vec <- rnorm(1000000, mean = 0, sd = 1)
hist(norm_vec)
# creating the distribution of sample means
sample_means_normal = sampling_distribution(norm_vec)
sampling_distribution <- function(pop_dist) {
sample_dist <- c()
for (i in 1:number_of_samples) {
sample_dist[i] = mean(sample(pop_dist, size=sample_size))
}
return(samples_dist)
}
## Binomial
## Chi-Square
## F
## Logistic
##############################################
####### Normal Distribution (Gaussian) #######
##############################################
# creating the population distribution
norm_vec <- rnorm(1000000, mean = 0, sd = 1)
hist(norm_vec)
# creating the distribution of sample means
sample_means_normal <- sampling_distribution(norm_vec)
hist(sample_means_normal)
sampling_distribution <- function(pop_dist) {
sample_dist <- c()
for (i in 1:number_of_samples) {
sample_dist[i] = mean(sample(pop_dist, size=sample_size))
}
return(sample_dist)
}
## Binomial
## Chi-Square
## F
## Logistic
##############################################
####### Normal Distribution (Gaussian) #######
##############################################
# creating the population distribution
norm_vec <- rnorm(1000000, mean = 0, sd = 1)
hist(norm_vec)
# creating the distribution of sample means
sample_means_normal <- sampling_distribution(norm_vec)
hist(sample_means_normal)
number_of_samples = 20; sample_size = 30
## Binomial
## Chi-Square
## F
## Logistic
##############################################
####### Normal Distribution (Gaussian) #######
##############################################
norm_vec <- rnorm(1000000, mean = 0, sd = 1) # creating the population distribution
sample_means_normal <- sampling_distribution(norm_vec) # creating the distribution of sample means
hist(norm_vec); hist(sample_means_normal)
## Binomial
## Chi-Square
## F
## Logistic
##############################################
####### Normal Distribution (Gaussian) #######
##############################################
norm_vec <- rnorm(1000000, mean = 0, sd = 1) # creating the population distribution
sample_means_normal <- sampling_distribution(norm_vec) # creating the distribution of sample means
hist(norm_vec); hist(sample_means_normal)
##############################################
################## Poisson  ##################
##############################################
# creating the population distribution
poisson_vec <- rpois(1000000, lambda=18)
hist(poisson_vec)
##############################################
################## Poisson  ##################
##############################################
poisson_vec <- rpois(1000000, lambda=18) # creating the population distribution
sample_means_pois <- sampling_distribution(poisson_vec) # creating the distribution of sample means
hist(poisson_vec); hist(sample_means_pois) ## creating histograms of both distributions
##############################################
################## Poisson  ##################
##############################################
poisson_vec <- rpois(1000000, lambda=4) # creating the population distribution
sample_means_pois <- sampling_distribution(poisson_vec) # creating the distribution of sample means
hist(poisson_vec); hist(sample_means_pois) ## creating histograms of both distributions
set.seed(1000000)
number_of_samples = 1000
##############################################
################## Poisson  ##################
##############################################
poisson_vec <- rpois(1000000, lambda=4) # creating the population distribution
sample_means_pois <- sampling_distribution(poisson_vec) # creating the distribution of sample means
hist(poisson_vec); hist(sample_means_pois) ## creating histograms of both distributions
##############################################
################## Poisson ###################
##############################################
t_vec <- rt(1000000)
##############################################
################## Poisson ###################
##############################################
t_vec <- rt(1000000, df=30)
sample_means_t <- sampling_distribution(t_vec)
hist(t_vec); hist(sample_means_t)
##############################################
################## Student t #################
##############################################
t_vec <- rt(1000000, df=30)
sample_means_t <- sampling_distribution(t_vec)
hist(t_vec); hist(sample_means_t)
##############################################
################## Poisson ###################
##############################################
poisson_vec <- rpois(1000000, lambda=4)
hist(poisson_vec); hist(sample_means_pois)
